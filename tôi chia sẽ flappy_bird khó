import pygame
import random
import sys
 
def rotate_bird(bird):
    return pygame.transform.rotate(bird, -bird_movement * 3)

def bird_animation():
    return bird_list[bird_index], bird_rect

def create_pipe():
    random_pipe_pos = random.choice(pipe_height)  # Lựa chọn vị trí ống ngẫu nhiên
    print(f"Pipe Y position: {random_pipe_pos}")  # In ra để kiểm tra vị trí của ống

    # Ống dưới
    bottom_pipe = pipe_surface.get_rect(midtop=(screen_width + 50, random_pipe_pos))
    
    # Ống trên
    top_pipe = pipe_surface.get_rect(midbottom=(screen_width + 50, random_pipe_pos - 120))  # Điều chỉnh chiều cao cho ống trên
    
    # Đảm bảo ống trên không ra ngoài màn hình
    if top_pipe.bottom < 0:
        top_pipe.bottom = 0
    
    print(f"Top pipe rect: {top_pipe}")  # In ra để kiểm tra vị trí của ống trên
    
    return bottom_pipe, top_pipe

def move_pipe(pipes):
    for pipe in pipes:
        pipe.centerx -= 4  # Giảm tốc độ để di chuyển mượt mà hơn
    return [pipe for pipe in pipes if pipe.right > 0]

def draw_pipe(pipes):
    for pipe in pipes:
        if pipe.bottom >= screen_height:  # Ống dưới
            screen.blit(pipe_surface, pipe)
        else:  # Ống trên
            screen.blit(pipe_surface, pipe)

def check_collision(pipes):
    for pipe in pipes:
        if bird_rect.colliderect(pipe):
            return False
    if bird_rect.top <= -100 or bird_rect.bottom >= screen_height:
        return False
    return True

def score_display(game_state):
    if game_state == 'main game':
        score_surface = game_font.render(f'Diểm: {int(score)}', True, (255, 255, 255))
        score_rect = score_surface.get_rect(center=(screen_width / 2, 50))
        screen.blit(score_surface, score_rect)
    if game_state == 'game_over':
        high_score_surface = game_font.render(f'Diểm cao: {int(high_score)}', True, (255, 255, 255))
        high_score_rect = high_score_surface.get_rect(center=(screen_width / 2, screen_height - 150))
        screen.blit(high_score_surface, high_score_rect)

def update_score(score, high_score):
    if score > high_score:
        high_score = score
    return high_score

pygame.init()

# Kích thước màn hình và thiết lập
screen_width, screen_height = (400, 650)
screen = pygame.display.set_mode((screen_width, screen_height))
clock = pygame.time.Clock()

# Font chữ cho điểm số
game_font = pygame.font.Font(None, 40)

# Trọng lực và chuyển động của chim
gravity = 0.2  # Tăng trọng lực để chuyển động rơi mượt mà hơn
bird_movement = 0

# Trạng thái trò chơi
game_active = True
score = 0
high_score = 0

# Nền và các đối tượng
bg = pygame.image.load('assets/background-day.png').convert()
bg = pygame.transform.scale(bg, (screen_width, screen_height))

floor = pygame.image.load('assets/base.png').convert()
floor = pygame.transform.scale2x(floor)

bird_down = pygame.transform.scale2x(pygame.image.load('assets/redbird-downflap.png').convert_alpha())
bird_mid = pygame.transform.scale2x(pygame.image.load('assets/redbird-midflap.png').convert_alpha())
bird_up = pygame.transform.scale2x(pygame.image.load('assets/redbird-upflap.png').convert_alpha())
bird_list = [bird_down, bird_mid, bird_up]
bird_index = 0
bird = bird_list[bird_index]
bird_rect = bird.get_rect(center=(100, screen_height / 2))

# Các sự kiện cho chim
birdflap = pygame.USEREVENT + 1
pygame.time.set_timer(birdflap, 200)

# Sự kiện cho ống
spawnpipe = pygame.USEREVENT
pygame.time.set_timer(spawnpipe, 3500)  # Tăng thời gian để ống xuất hiện chậm hơn

# Chiều cao của ống (giảm chiều cao và làm ống gầy hơn)
pipe_height = [320, 450, 200]

# Game over image
game_over_surface = pygame.transform.scale2x(pygame.image.load('assets/message.png').convert_alpha())
game_over_surface = pygame.transform.scale(game_over_surface, (int(screen_width * 0.8), int(screen_height * 0.4)))
game_over_rect = game_over_surface.get_rect(center=(screen_width / 2, screen_height / 2))

# Ống và các đối tượng liên quan (giảm chiều rộng và chiều cao)
pipe_surface = pygame.transform.scale(pygame.image.load('assets/pipe-2.png').convert(), (70, 500))  # Ống trên
pipe_surface = pygame.transform.scale(pygame.image.load('assets/pipe-1.png').convert(), (70, 500))  # Ống dưới
pipe_surface = pygame.transform.scale2x(pipe_surface)
pipe_list = []

# Vị trí của sàn
floor_x_pos = 0

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE and game_active:
                bird_movement = 0
                bird_movement = -7  # Giảm nhẹ lực vỗ cánh để nhảy chậm hơn
            if event.key == pygame.K_SPACE and not game_active:
                game_active = True
                pipe_list.clear()
                bird_rect.center = (100, screen_height / 2)
                bird_movement = 0
                score = 0

        if event.type == spawnpipe:
            pipe_list.extend(create_pipe())

        if event.type == birdflap:
            bird_index = (bird_index + 1) % 3
            bird, bird_rect = bird_animation()

    # Vẽ nền
    screen.blit(bg, (0, 0))

    if game_active:
        # Di chuyển chim và xử lý trọng lực
        bird_movement += gravity
        rotated_bird = rotate_bird(bird)
        bird_rect.centery += bird_movement
        screen.blit(rotated_bird, bird_rect)

        # Kiểm tra va chạm
        game_active = check_collision(pipe_list)

        # Di chuyển và vẽ ống
        pipe_list = move_pipe(pipe_list)
        draw_pipe(pipe_list)

        # Cập nhật điểm số
        score += 0.01
        score_display('main game')

    else:
        # Vẽ màn hình game over
        screen.blit(game_over_surface, game_over_rect)
        high_score = update_score(score, high_score)
        score_display('game_over')

    # Di chuyển sàn
    floor_x_pos -= 1
    screen.blit(floor, (floor_x_pos, screen_height - 100))
    screen.blit(floor, (floor_x_pos + screen_width, screen_height - 100))

    if floor_x_pos <= -screen_width:
        floor_x_pos = 0

    pygame.display.update()
    clock.tick(120)
